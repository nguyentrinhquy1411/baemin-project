import axios from "axios";
import { AuthService } from "@/services/auth";

const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080",
  headers: {
    "Content-Type": "application/json",
  },
});

let isRefreshing = false;
let failedQueue: any[] = [];
let tokenRefreshInterval: NodeJS.Timeout | null = null;

// Ki·ªÉm tra token c√≥ h·∫øt h·∫°n hay kh√¥ng
function isTokenExpired(token: string | null): boolean {
  if (!token) return true;

  try {
    // Gi·∫£i m√£ JWT (ph·∫ßn payload)
    const base64Url = token.split(".")[1];
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const payload = JSON.parse(window.atob(base64));

    // T√≠nh th·ªùi gian c√≤n l·∫°i (ms)
    const exp = payload.exp * 1000; // Convert to milliseconds
    const now = Date.now();
    const timeRemaining = exp - now;

    // N·∫øu c√≤n d∆∞·ªõi 5 gi√¢y, coi nh∆∞ s·∫Øp h·∫øt h·∫°n
    return timeRemaining < 5000;
  } catch (error) {
    console.error("Error parsing JWT token:", error);
    return true;
  }
}

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

// H√†m ch·ªß ƒë·ªông l√†m m·ªõi token tr∆∞·ªõc khi h·∫øt h·∫°n
async function refreshTokenProactively(): Promise<boolean> {
  // Skip n·∫øu kh√¥ng ·ªü client side ho·∫∑c ƒë√£ c√≥ request refresh ƒëang ch·∫°y
  if (typeof window === "undefined" || isRefreshing) {
    return false;
  }

  const { accessToken, refreshToken } = AuthService.getTokens();

  // N·∫øu kh√¥ng c√≥ token ho·∫∑c token ch∆∞a g·∫ßn h·∫øt h·∫°n
  if (!accessToken || !refreshToken) {
    return false;
  }

  console.log("üîÑ Ch·ªß ƒë·ªông l√†m m·ªõi token tr∆∞·ªõc khi h·∫øt h·∫°n");
  isRefreshing = true;

  try {
    const response = await AuthService.refreshToken(refreshToken);
    const { access_token, refresh_token } = response;

    console.log("‚úÖ L√†m m·ªõi token th√†nh c√¥ng");
    // L∆∞u th·ªùi gian l√†m m·ªõi token g·∫ßn nh·∫•t
    const lastRefreshed = new Date().toISOString();
    localStorage.setItem("token_last_refreshed", lastRefreshed);

    AuthService.saveTokens(access_token, refresh_token);
    axiosInstance.defaults.headers.Authorization = `Bearer ${access_token}`;
    return true;
  } catch (error) {
    console.error("‚ùå L√†m m·ªõi token th·∫•t b·∫°i:", error);

    // Ki·ªÉm tra n·∫øu l·ªói 401 ho·∫∑c 403, c√≥ th·ªÉ token h·∫øt h·∫°n ho√†n to√†n
    if (
      axios.isAxiosError(error) &&
      (error.response?.status === 401 || error.response?.status === 403)
    ) {
      console.log("‚ö†Ô∏è Refresh token kh√¥ng h·ª£p l·ªá, ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng");
      AuthService.clearTokens();
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p n·∫øu ·ªü client side
      if (typeof window !== "undefined") {
        window.location.href = "/login";
      }
    }

    return false;
  } finally {
    isRefreshing = false;
  }
}

axiosInstance.interceptors.request.use(
  async (config) => {
    // B·ªè qua c√°c endpoint kh√¥ng c·∫ßn x√°c th·ª±c
    const skipAuthEndpoints = [
      "/auth/login",
      "/auth/refresh",
      "/auth/register",
      "/auth/google",
    ];
    const isAuthEndpoint = skipAuthEndpoints.some((endpoint) =>
      config.url?.includes(endpoint)
    );

    if (typeof window !== "undefined" && !isAuthEndpoint) {
      // L·∫•y token hi·ªán t·∫°i
      const { accessToken, refreshToken } = AuthService.getTokens();

      // Ki·ªÉm tra token
      if (accessToken) {
        // Ki·ªÉm tra n·∫øu token s·∫Øp h·∫øt h·∫°n, l√†m m·ªõi n√≥ tr∆∞·ªõc khi g·ª≠i request
        if (isTokenExpired(accessToken) && refreshToken) {
          console.log(
            "üîë Token s·∫Øp h·∫øt h·∫°n, ƒëang l√†m m·ªõi tr∆∞·ªõc khi g·ª≠i request"
          );
          const refreshed = await refreshTokenProactively();
          if (refreshed) {
            // N·∫øu l√†m m·ªõi th√†nh c√¥ng, c·∫≠p nh·∫≠t token cho request hi·ªán t·∫°i
            const { accessToken: newToken } = AuthService.getTokens();
            config.headers.Authorization = `Bearer ${newToken}`;
            console.log("üîê ƒê√£ c·∫≠p nh·∫≠t token m·ªõi cho request");
          } else {
            // N·∫øu kh√¥ng l√†m m·ªõi ƒë∆∞·ª£c, v·∫´n d√πng token c≈©
            config.headers.Authorization = `Bearer ${accessToken}`;
            console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ l√†m m·ªõi token, d√πng token c≈©");
          }
        } else {
          // Token c√≤n h·∫°n, s·ª≠ d·ª•ng b√¨nh th∆∞·ªùng
          config.headers.Authorization = `Bearer ${accessToken}`;
        }
      }
    }
    return config;
  },
  (error) => Promise.reject(error)
);

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then((token) => {
            originalRequest.headers.Authorization = `Bearer ${token}`;
            return axiosInstance(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }
      originalRequest._retry = true;
      isRefreshing = true;
      const { refreshToken } = AuthService.getTokens();
      if (!refreshToken) {
        processQueue(new Error("No refresh token available"));
        return Promise.reject(error);
      }
      try {
        const response = await AuthService.refreshToken(refreshToken);
        const { access_token, refresh_token } = response;
        AuthService.saveTokens(access_token, refresh_token);
        processQueue(null, access_token);
        originalRequest.headers.Authorization = `Bearer ${access_token}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        processQueue(refreshError);
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }
    return Promise.reject(error);
  }
);

// Thi·∫øt l·∫≠p timer ƒë·ªÉ ki·ªÉm tra v√† l√†m m·ªõi token ƒë·ªãnh k·ª≥
function setupTokenRefreshTimer() {
  // H·ªßy timer c≈© n·∫øu c√≥
  if (tokenRefreshInterval) {
    clearInterval(tokenRefreshInterval);
  }

  // Ki·ªÉm tra token m·ªói 3 gi√¢y
  // (th·ªùi gian n√†y nh·ªè h∆°n 10s ƒë·ªÉ ƒë·∫£m b·∫£o k·ªãp l√†m m·ªõi tr∆∞·ªõc khi h·∫øt h·∫°n)
  tokenRefreshInterval = setInterval(async () => {
    const { accessToken } = AuthService.getTokens();
    if (accessToken && isTokenExpired(accessToken)) {
      console.log("‚è±Ô∏è Timer ki·ªÉm tra: Token s·∫Øp h·∫øt h·∫°n, ƒëang l√†m m·ªõi...");
      await refreshTokenProactively();
    }
  }, 3000);

  console.log("‚è∞ Timer ki·ªÉm tra token ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p");
}

// Kh·ªüi ƒë·ªông c∆° ch·∫ø ki·ªÉm tra token t·ª± ƒë·ªông n·∫øu ƒëang ·ªü client-side
if (typeof window !== "undefined") {
  setTimeout(() => {
    setupTokenRefreshTimer();
  }, 1000); // Delay 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o c√°c module kh√°c ƒë√£ load xong
}

export default axiosInstance;
