generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_profiles {
  user_id    String  @id @db.Uuid
  phone      String? @db.VarChar(20)
  address    String?
  first_name String? @db.VarChar(50)
  last_name  String? @db.VarChar(50)
  image_url  String? // Avatar image URL
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  password       String
  role           user_role        @default(user)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  username       String?          @unique @db.VarChar(100)
  user_profiles  user_profiles?
  refresh_tokens refresh_tokens[]
  stalls         stall[] // Relationship to stalls (store ownership)
  ratings        rating[] // User can leave ratings
}

enum user_role {
  user
  store
  super_user
}

model refresh_tokens {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String   @unique
  user_id    String   @db.Uuid
  expires    DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  revoked    Boolean  @default(false)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Store categories model
model category_stall {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  image_url   String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  stalls      stall[] // Relationship to stalls
}

// Food categories model
model category_food {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(100)
  description         String?
  image_url           String?
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  stall_food_category stall_food_category[] // Relationship to stall_food_category
}

// Stores/restaurants model
model stall {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(150)
  description String?
  address     String
  phone       String   @db.VarChar(20)
  open_time   String?  @db.VarChar(50) // Store opening hours
  image_url   String?
  banner_url  String?
  owner_id    String   @db.Uuid
  category_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  is_active   Boolean  @default(true)

  // Relationships
  owner               users                 @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  category            category_stall        @relation(fields: [category_id], references: [id])
  foods               food[] // Relationship to food items
  badges              badges_stall[] // Relationship to badges
  stall_food_category stall_food_category[] // Relationship to stall_food_category
  ratings             rating[] // Relationship to ratings
}

// Food menu items model
model food {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(150)
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  image_url    String?
  stall_id     String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  is_available Boolean  @default(true)

  // Relationships
  stall               stall                 @relation(fields: [stall_id], references: [id], onDelete: Cascade)
  stall_food_category stall_food_category[] // Relationship to stall_food_category
  ratings             rating[] // Relationship to ratings
}

// Many-to-many relationship between food and categories
model stall_food_category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stall_id    String   @db.Uuid
  food_id     String   @db.Uuid
  category_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  stall    stall         @relation(fields: [stall_id], references: [id], onDelete: Cascade)
  food     food          @relation(fields: [food_id], references: [id], onDelete: Cascade)
  category category_food @relation(fields: [category_id], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate combinations
  @@unique([stall_id, food_id, category_id])
}

// Food reviews/ratings model
model rating {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score      Int // Rating score (e.g., 1-5)
  comment    String?
  user_id    String   @db.Uuid
  food_id    String   @db.Uuid
  stall_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  user  users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  food  food  @relation(fields: [food_id], references: [id], onDelete: Cascade)
  stall stall @relation(fields: [stall_id], references: [id], onDelete: Cascade)

  // Constraints
  @@index([user_id, food_id]) // Improve query performance for user ratings
}

// Badges for stores or food items model
model badges_stall {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  image_url   String?
  stall_id    String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  stall stall @relation(fields: [stall_id], references: [id], onDelete: Cascade)
}